Wedding Module: Architecture and Data Flow
===========================================

Overview
--------
The `src/app/wedding` folder implements the wedding authentication system, user dashboard, and dynamic wedding website templates. It is designed for users (couples) to register, log in, manage their wedding details, and present a customizable wedding website. The system uses Supabase for authentication and data storage, React Context for state management, and a modular component/template structure for flexibility.

Folder Structure and File Descriptions
--------------------------------------

- **components/**
  - Contains reusable UI components for the wedding module, such as navigation bars and sidebars.
  - `sidebar/TemplateSidebar.tsx`: Sidebar for selecting and saving wedding website templates. Interacts with the main dynamic page to allow users to switch between templates and save their choice.

- **contexts/**
  - Provides React Contexts and Providers for global state management within the wedding module.
  - `WeddingContext.tsx`: Defines the context type and creates the context for wedding data, wishes, user session, and related actions (login, logout, update data, etc.).
  - `WeddingProvider.tsx`: Implements the provider, managing state for wedding data, wishes, user session, and loading state. Handles data fetching from Supabase, real-time updates (via channels), and exposes actions for updating wedding data, gallery images, and wishes. Wraps children components to provide context values.

- **templates/**
  - Houses all wedding website templates and their supporting files.
  - `[slag]/` (dynamic route): Contains per-template logic, contexts, and components.
    - `model_1/`: Example template with its own components, sections, and styles.
      - `components/sections/`: Main page sections (Hero, Gallery, Contact, etc.).
      - `components/Editable/`: Editable UI components for in-place editing.
      - `components/decorations/`: Decorative UI elements for the template.
      - `components/custom/`: Custom UI widgets (e.g., image upload, wish cards).
      - `components/animations/`: Animation components for enhanced UX.
    - `contexts/`: (Not present in this workspace, but referenced in layout) would provide template-specific context providers.
    - `sidebar/TemplateSidebar.tsx`: Sidebar for template selection (see above).
    - `types/wedding.ts`: TypeScript interfaces for all wedding-related data structures (User, WeddingData, WeddingWish, etc.).
    - `DynamicUserWeddingPage.tsx`: Main dynamic page component. Dynamically loads the selected template, manages template switching, and integrates the sidebar for editing.

- **layout.tsx**
  - The main layout for all wedding pages. Wraps children with authentication and wedding data providers, and includes a Toaster for notifications. Ensures all wedding pages have access to context and consistent styling.

- **README.md**
  - Documentation for the wedding module, including file structure, features, authentication flow, usage examples, database schema, security features, and planned enhancements.


Data Flow
---------

1. **Authentication & Session Management**
   - Users register and log in via dedicated pages (not present in this snapshot, but referenced in README).
   - Authentication state is managed via Supabase and React Context (`WeddingProvider`).
   - Session persists across browser reloads using Supabase's session management.

2. **Context Providers**
   - `WeddingProvider` fetches wedding data and wishes from Supabase based on the authenticated user.
   - Provides state and actions (update, save, add wish, login, logout) to all child components via `WeddingContext`.
   - Real-time updates for wishes are handled via Supabase channels.

3. **Dynamic Page Rendering**
   - `DynamicUserWeddingPage.tsx` dynamically loads the selected template (e.g., `model_1`) using Vite's `import.meta.glob`.
   - The sidebar allows users to switch templates and save their choice.
   - The selected template's main page is rendered as the core of the wedding website.

4. **Component Hierarchy**
   - Layout wraps all pages with providers and shared UI (e.g., Toaster).
   - Pages/components consume context for data and actions.
   - UI components (sections, editable fields, decorations) are composed to build the wedding website.

5. **Data Fetching & Updates**
   - On login/session change, `WeddingProvider` fetches wedding data and wishes from Supabase tables (`wedding_data`, `guest_wishes`).
   - Updates (e.g., editing wedding details, uploading images) are sent to Supabase and reflected in context state.
   - Wishes are updated in real-time via Supabase channels.

6. **Type Safety**
   - All data structures are defined in `types/wedding.ts` for strong typing and consistency across the module.


How Files Interact
------------------
- `layout.tsx` ensures all wedding pages have access to authentication and wedding data via context providers.
- `WeddingProvider.tsx` manages all data fetching, updates, and session state, exposing them via `WeddingContext`.
- Components and pages consume context to display and update data.
- `DynamicUserWeddingPage.tsx` loads the appropriate template and integrates the sidebar for template management.
- UI components are organized by function (sections, editable, decorations, custom, animations) for modularity and reusability.


Summary
-------
The `src/app/wedding` folder is a modular, context-driven system for managing wedding authentication, user dashboards, and dynamic wedding website templates. It leverages Supabase for backend data and authentication, React Context for state management, and a flexible component/template structure for extensibility. Data flows from Supabase to context providers, then to UI components, with real-time updates and strong type safety throughout. 